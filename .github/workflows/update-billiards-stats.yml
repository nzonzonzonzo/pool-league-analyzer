name: Update Billiards Stats

on:
  schedule:
    - cron: '0 10 * * 4'  # Run every Thursday at 10 AM UTC
  workflow_dispatch:      # Allow manual triggering

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm install axios cheerio
      
      - name: Create archive directory if it doesn't exist
        run: mkdir -p public/data/archives
      
      - name: Archive current stats file if it exists
        run: |
          if [ -f public/data/team_stats.json ]; then
            # Create a timestamp for the archive filename
            TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
            # Copy the current file to the archive with the timestamp
            cp public/data/team_stats.json public/data/archives/team_stats_${TIMESTAMP}.json
            echo "Archived current stats to public/data/archives/team_stats_${TIMESTAMP}.json"
          else
            echo "No existing stats file to archive"
          fi
      
      - name: Run scraper
        run: |
          node -e "
          const axios = require('axios');
          const cheerio = require('cheerio');
          const fs = require('fs');

          async function scrapeAndUpdateStats(jsonFilePath = 'public/data/team_stats.json', authCookie = '${{ secrets.BILLIARDS_COOKIE }}') {
            try {
              console.log('Starting scraper...');
              // Fetch the page content with the authentication cookie
              const response = await axios.get('https://leagues2.amsterdambilliards.com/8ball/abc/individual_standings.php?foo=bar', {
                headers: {
                  'Cookie': authCookie
                }
              });
              
              console.log('Page fetched successfully, parsing data...');
              // Load the HTML into cheerio
              const $ = cheerio.load(response.data);
              
              // Initialize an array to hold all player data
              const allPlayerData = [];
              
              // Find all team tables
              $('tr.data_level_1_nobg, tr[bgcolor=\"#FF6500\"] + table, tr[bgcolor=\"#000080\"] + table, tr[bgcolor=\"#551A8B\"] + table, tr[bgcolor=\"#CD2626\"] + table, tr[bgcolor=\"#006400\"] + table, tr[bgcolor=\"#CC9900\"] + table').each(function() {
                // Get the team name from the previous row
                const teamNameElement = $(this).find('td b i');
                if (teamNameElement.length === 0) return;
                
                const teamName = teamNameElement.text().trim();
                console.log('Processing team: ' + teamName);
                
                // Find player rows within the team table
                const playerRows = $(this).next('table').find('tr:not(:first-child):not(:last-child)');
                
                playerRows.each(function() {
                  const cells = $(this).find('td');
                  if (cells.length < 10) return; // Skip header rows or malformed rows
                  
                  // Extract the data from the cells
                  const name = $(cells[1]).text().replace(/\\s+/g, ' ').trim().replace(/^b/, '');
                  if (!name || name === 'Totals') return; // Skip rows without names or the totals row
                  
                  const handicap = parseInt($(cells[2]).text().trim(), 10) || 0;
                  const wins = parseInt($(cells[5]).text().trim(), 10) || 0;
                  const losses = parseInt($(cells[6]).text().trim(), 10) || 0;
                  const total = parseInt($(cells[7]).text().trim(), 10) || 0;
                  
                  // Calculate win percentage
                  const winPercentage = total > 0 ? ((wins / total) * 100).toFixed(1) + '%' : '0.0%';
                  
                  // Add player data to the array
                  allPlayerData.push({
                    team: teamName,
                    name,
                    handicap,
                    wins,
                    losses,
                    total,
                    winPercentage
                  });
                });
              });
              
              // Sort players alphabetically by team and then by name
              allPlayerData.sort((a, b) => {
                if (a.team !== b.team) {
                  return a.team.localeCompare(b.team);
                }
                return a.name.localeCompare(b.name);
              });
              
              // Validation to ensure we don't save empty data
              if (allPlayerData.length < 50) {
                throw new Error('Scraped data appears incomplete. Only found ' + allPlayerData.length + ' players.');
              }
              
              // Save the data to a JSON file
              fs.writeFileSync(jsonFilePath, JSON.stringify(allPlayerData, null, 2));
              console.log('Data successfully written to ' + jsonFilePath + ' with ' + allPlayerData.length + ' player records');
              
              return allPlayerData;
            } catch (error) {
              console.error('Error scraping data:', error);
              throw error;
            }
          }

          scrapeAndUpdateStats()
            .then(data => console.log('Scraper completed successfully'))
            .catch(err => { 
              console.error('Scraper failed:', err); 
              process.exit(1); 
            });
          "
      
      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          add: 'public/data/'
          message: 'Auto-update billiards stats on $(date +"%Y-%m-%d")'
          default_author: github_actions
